{"version":3,"sources":["images/potion__cyan.png","images/potion__blue.png","images/potion__orange.png","images/potion__green.png","images/potion__brown.png","images/potion__gray.png","images/potion-mask.png","images/cauldron.png","images/placeholder-background-image.jpg","components/MixingStation.js","components/Ingredient.js","components/Background.js","components/ResultScreen.js","components/RecipeBook.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MixingStation","props","updateDimensions","area","document","getElementById","style","window","getComputedStyle","w","parseFloat","getPropertyValue","h","newScale","Math","min","innerWidth","innerHeight","transform","setState","scale","handleDragMove","e","index","newArray","state","inCauldron","isIngredientWithinCauldronArea","handleDragStop","cauldronArray","numberInCauldron","indexesInCauldron","forEach","value","push","resultTime","cauldron","point","x","clientX","y","clientY","rectangle","getBoundingClientRect","pointIsWithinRectangle","resetApp","timeToReset","this","addEventListener","body","preventDefault","width","height","ingredientComponents","image","ingredient__air","xOff","yOff","ingredient__water","ingredient__fire","ingredient__plant","ingredient__animal","ingredient__ground","map","data","key","id","src","alt","draggable","ingredients","onButtonClick","React","Component","Ingredient","dragPos","className","position","onStop","onDrag","left","top","RecipeBook","ingredientNames","Background","backgroundImage","ResultScreen","recipeResult","getResultFromIngredients","maskStyle","maskImage","image_mask","WebkitMaskImage","maskSize","WebkitMaskSize","Paper","elevation","title","ingredientImages","description","onClick","0","1","2","3","4","5","image_air","image_water","image_fire","image_plant","image_animal","image_ground","ingredient1","ingredient2","tryCombination","combination","result","console","error","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.804f8050.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/potion__cyan.3d3c66bc.png\";","module.exports = __webpack_public_path__ + \"static/media/potion__blue.3ee3aa24.png\";","module.exports = __webpack_public_path__ + \"static/media/potion__orange.f505d1fa.png\";","module.exports = __webpack_public_path__ + \"static/media/potion__green.b8228b60.png\";","module.exports = __webpack_public_path__ + \"static/media/potion__brown.11bf51e3.png\";","module.exports = __webpack_public_path__ + \"static/media/potion__gray.2b30d28a.png\";","module.exports = __webpack_public_path__ + \"static/media/potion-mask.eae7f448.png\";","module.exports = __webpack_public_path__ + \"static/media/cauldron.3ec68944.png\";","module.exports = __webpack_public_path__ + \"static/media/placeholder-background-image.defe5c60.jpg\";","import React from \"react\";\r\n\r\nimport { Ingredient , ResultScreen } from \"../components\";\r\n\r\nimport ingredient__air from \"../images/potion__cyan.png\";\r\nimport ingredient__water from \"../images/potion__blue.png\";\r\nimport ingredient__fire from \"../images/potion__orange.png\";\r\nimport ingredient__plant from \"../images/potion__green.png\";\r\nimport ingredient__animal from \"../images/potion__brown.png\";\r\nimport ingredient__ground from \"../images/potion__gray.png\";\r\nimport cauldron from \"../images/cauldron.png\";\r\n\r\n\r\nclass MixingStation extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            scale: 1,\r\n            inCauldron: [false, false, false, false, false, false],\r\n            indexesInCauldron: [],\r\n            resultTime: false,\r\n            timeToReset: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateDimensions();\r\n        window.addEventListener(\"resize\", this.updateDimensions);\r\n        document.body.addEventListener(\"touchmove\", (e) => {\r\n            e.preventDefault();\r\n        });\r\n    }\r\n\r\n    updateDimensions = () => {\r\n        // Scale app area to fit window\r\n        let area = document.getElementById(\"mixing-station\");\r\n        let style = window.getComputedStyle(area);\r\n        let w = parseFloat(style.getPropertyValue(\"width\")) - 1; //-1 to prevent slivers at edges\r\n        let h = parseFloat(style.getPropertyValue(\"height\")) - 1;\r\n        let newScale = Math.min(\r\n            (window.innerWidth/w),\r\n            (window.innerHeight/h)\r\n        )\r\n        // Scale active content area\r\n        if (area) area.style.transform = \"translate(-50%, -50%) scale(\" + newScale + \") \";\r\n        // Save scale in state\r\n        this.setState({\r\n            scale: newScale\r\n        })\r\n    }\r\n\r\n    pointIsWithinRectangle(point, rectangle) {\r\n        if (point.x >= rectangle.x &&\r\n            point.y >= rectangle.y &&\r\n            point.x <= rectangle.x + rectangle.width &&\r\n            point.y <= rectangle.y + rectangle.height ) {\r\n                return true;\r\n            }\r\n        return false;\r\n    }\r\n\r\n    handleDragMove = (e, index) => {\r\n        // Check if ingredient was dropped in cauldron area\r\n        let newArray = this.state.inCauldron;\r\n        if (this.isIngredientWithinCauldronArea(e)) {\r\n            newArray[index] = true;\r\n        }\r\n        else {\r\n            newArray[index] = false;\r\n        }\r\n        this.setState({ inCauldron: newArray });\r\n    }\r\n\r\n    handleDragStop = (e, index) => {\r\n        // Check if two ingredients are in cauldron area\r\n        const cauldronArray = this.state.inCauldron;\r\n        let numberInCauldron = 0, indexesInCauldron = [];\r\n        cauldronArray.forEach((value, index) => {\r\n            if (value === true) {\r\n                numberInCauldron++;\r\n                indexesInCauldron.push(index);\r\n            }\r\n        });\r\n        if (numberInCauldron >= 2) {\r\n            // Time to mix!\r\n            this.setState({\r\n                resultTime: true,\r\n                indexesInCauldron: indexesInCauldron\r\n            });\r\n        }\r\n    }\r\n\r\n    isIngredientWithinCauldronArea = (e) => {\r\n        const cauldron = document.getElementById(\"cauldron\");\r\n        const point = { x: e.clientX, y: e.clientY };\r\n        const rectangle = cauldron.getBoundingClientRect();\r\n        if (this.pointIsWithinRectangle(point, rectangle)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    resetApp = () => {\r\n        this.setState({\r\n            inCauldron: [false, false, false, false, false, false],\r\n            indexesInCauldron: [],\r\n            resultTime: false,\r\n            timeToReset: true\r\n        });\r\n    }\r\n    \r\n    render() {\r\n\r\n        // Create Ingredient components\r\n        const xOff = 7, yOff = 5, xDiff = 30, yDiff = 20;\r\n        const ingredientDataArray =[\r\n            { image: ingredient__air,       x: xOff +  0 + \"%\",             y: yOff +  0 + \"%\"},\r\n            { image: ingredient__water,     x: xOff + xDiff + \"%\",          y: yOff +  0 + \"%\"},\r\n            { image: ingredient__fire,      x: xOff + xDiff*2 + \"%\",        y: yOff +  0 + \"%\"},\r\n            { image: ingredient__plant,     x: xOff +  0 + \"%\",             y: yOff + yDiff + \"%\"},\r\n            { image: ingredient__animal,    x: xOff + xDiff + \"%\",          y: yOff + yDiff + \"%\"},\r\n            { image: ingredient__ground,    x: xOff + xDiff*2 + \"%\",        y: yOff + yDiff + \"%\"}\r\n        ];\r\n        const ingredientComponents = ingredientDataArray.map((data, index) => {\r\n            return <Ingredient timeToReset={this.state.timeToReset} index={index} scale={this.state.scale} inCauldron={this.state.inCauldron[index]} handleDragStop={this.handleDragStop} handleDragMove={this.handleDragMove} image={data.image} x={data.x} y={data.y} key={index}/>\r\n        })\r\n\r\n        // Reset positions if needed\r\n        if (this.state.timeToReset === true) {\r\n            this.setState({ timeToReset: false });\r\n        }\r\n\r\n        // Render\r\n        return (\r\n            <div id=\"mixing-station\">\r\n                {ingredientComponents}\r\n                <img id=\"cauldron\" src={cauldron} alt=\"\" draggable=\"false\"/>\r\n                <p id=\"instruction-text\">Drag two ingredients into the <br /> cauldron to mix them!</p>\r\n                {this.state.resultTime ? <ResultScreen ingredients={this.state.indexesInCauldron} onButtonClick={this.resetApp}/> : null}\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport default MixingStation;","import React from \"react\";\r\n\r\nimport Draggable from \"react-draggable\";\r\n\r\nimport { RecipeBook } from \"../components\";\r\n\r\nconst Ingredient = ({ image, x, y, index, inCauldron, scale, handleDragStop, handleDragMove, timeToReset }) => {\r\n    let className = \"ingredient\";\r\n    if (inCauldron) className += \" glowing\";\r\n    let dragPos;\r\n    if (timeToReset) {\r\n        dragPos = { x: 0, y: 0 };\r\n    }\r\n    else {\r\n        dragPos = null;\r\n    }\r\n\r\n    return (\r\n        <Draggable position={dragPos} scale={scale} onStop={(e) => handleDragStop(e, index)} onDrag={(e)=>handleDragMove(e, index)}>\r\n            <div className=\"ingredient-wrapper\" style={{ left: x, top: y }}>\r\n                <img alt=\"\" src={image} id={\"ingredient\" + index} className={className} draggable=\"false\"/>\r\n                <p className=\"ingredient--label\">{RecipeBook.ingredientNames[index]}</p>\r\n            </div>\r\n        </Draggable>\r\n    )\r\n}\r\n\r\n\r\nexport default Ingredient;","import React from \"react\";\r\n\r\nimport backgroundImage from \"../images/placeholder-background-image.jpg\";\r\n\r\nconst Background = () => {\r\n    return(\r\n        <img id=\"background-image\" src={ backgroundImage } alt=\"\" draggable={false}/>\r\n    )\r\n}\r\n\r\nexport default Background;","import React from \"react\";\r\nimport { Paper } from \"@material-ui/core\";\r\n\r\nimport { RecipeBook } from \"../components\";\r\n\r\nimport image_mask from \"../images/potion-mask.png\";\r\n\r\nconst ResultScreen = ({ ingredients, onButtonClick }) => {\r\n    // Look for recipe in recipe book\r\n    let recipeResult = RecipeBook.getResultFromIngredients(ingredients[0], ingredients[1]);\r\n\r\n    // Make image mask style\r\n    const maskStyle = {\r\n        maskImage: `url(${image_mask})`,\r\n        WebkitMaskImage: `url(${image_mask})`,\r\n        maskSize: \"100%\",\r\n        WebkitMaskSize: \"100%\"\r\n    }\r\n\r\n    return (\r\n        <div id=\"result-screen--blocker\">\r\n            <Paper elevation={16} id=\"result-screen--window\">\r\n                <p className=\"result-screen--title\">{recipeResult.title}</p>\r\n                <p className=\"result-screen--ingredients\">({recipeResult.ingredients})</p>\r\n                <div className=\"result-screen--image\">\r\n                    <img className=\"result-screen--image--base\" alt=\"\" src={RecipeBook.ingredientImages[ingredients[0]]} draggable={false} />\r\n                    <img className=\"result-screen--image--masked\" style={maskStyle} alt=\"\" src={RecipeBook.ingredientImages[ingredients[1]]} draggable={false}/>\r\n                </div>\r\n                <p className=\"result-screen--description\"><i>{recipeResult.description}</i></p>\r\n                <button className=\"result-screen--button\" onClick={onButtonClick}>Reset</button>\r\n            </Paper>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n\r\nexport default ResultScreen;","/// Recipe list\r\n\r\nimport image_air from \"../images/potion__cyan.png\";\r\nimport image_water from \"../images/potion__blue.png\";\r\nimport image_fire from \"../images/potion__orange.png\";\r\nimport image_plant from \"../images/potion__green.png\";\r\nimport image_animal from \"../images/potion__brown.png\";\r\nimport image_ground from \"../images/potion__gray.png\";\r\n\r\nconst RecipeBook = {\r\n\r\n    ingredientNames: {\r\n        0: \"Air\",\r\n        1: \"Water\",\r\n        2: \"Fire\",\r\n        3: \"Plant\",\r\n        4: \"Animal\",\r\n        5: \"Ground\"\r\n    },\r\n\r\n    ingredientImages: {\r\n        0: image_air,\r\n        1: image_water,\r\n        2: image_fire,\r\n        3: image_plant,\r\n        4: image_animal,\r\n        5: image_ground\r\n    },\r\n\r\n    getResultFromIngredients: (ingredient1, ingredient2) => {\r\n\r\n        const tryCombination = (ingredient1, ingredient2) => {\r\n            const combination = RecipeBook.ingredientNames[ingredient1] + \" + \" +  RecipeBook.ingredientNames[ingredient2];\r\n            let title, description;\r\n            switch(combination) {\r\n                case \"Air + Water\":     title = \"Bubble Bringer\"; description =\"Makes you burp bubbles!\"; break;\r\n                case \"Fire + Water\":    title = \"Sweat Sauce\"; description =\"Makes you sweat! A lot!\"; break;\r\n                case \"Fire + Air\":      title = \"Dragon Drink\"; description =\"Let's you breathe fire!\"; break;\r\n                case \"Plant + Water\":   title = \"Sip of Growth\"; description =\"Makes you taller!\"; break;\r\n                case \"Plant + Air\":     title = \"Mint Filter\"; description =\"Gives you fresh breath!\"; break;\r\n                case \"Plant + Fire\":    title = \"Chloroplast Blast\"; description =\"Turns your skin green!\"; break;\r\n                case \"Animal + Water\":  title = \"Swift Snorkel\"; description =\"Gives you gills and fins!\"; break;\r\n                case \"Animal + Air\":    title = \"Feather Flurry\"; description =\"Gives you wings!\"; break;\r\n                case \"Animal + Fire\":   title = \"Bio Glow\"; description =\"Makes your body glow!\"; break;\r\n                case \"Animal + Plant\":  title = \"Background Blur\"; description =\"Gives you camouflauge!\"; break;\r\n                case \"Ground + Water\":  title = \"Slime Time\"; description =\"Makes you slimy!\"; break;\r\n                case \"Ground + Air\":    title = \"Smoke Bomb\"; description =\"Surrounds you in a cloud of dust!\"; break;\r\n                case \"Ground + Fire\":   title = \"Magma Meltdown\"; description =\"Makes food melt in your mouth, literally!\"; break;\r\n                case \"Ground + Plant\":  title = \"Moss Maker\"; description =\"Covers you with moss!\"; break;\r\n                case \"Ground + Animal\": title = \"Beast Burrow\"; description =\"Makes you really want to dig a hole!\"; break;\r\n                default:\r\n                    return null;\r\n            }\r\n            return {title: title, description: description, ingredients: combination};\r\n        };\r\n\r\n        let result = tryCombination(ingredient1, ingredient2);\r\n        if (result === null) result = tryCombination(ingredient2, ingredient1);\r\n        if (result === null) {\r\n            console.error(\"Recipe not found!\");\r\n            return {title: \"???\", description: \"Something weird happened!\", ingredients: \"??? + ???\"};\r\n        }\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default RecipeBook;","import React from 'react';\nimport './App.css';\n\nimport { Background, MixingStation } from \"./components\";\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div id=\"app-container\">\n        <Background />\n        <MixingStation />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}